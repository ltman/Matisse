/*
 * Copyright 2017 Zhihu Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.library'
//apply plugin: 'com.novoda.bintray-release'
apply plugin: 'maven-publish'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29

        versionCode 20
        versionName "0.5.3-beta309"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            res {
                srcDirs 'src/main/res', 'src/main/res-blockdit'
            }
        }
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.annotation:annotation:1.1.0"
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation 'it.sephiroth.android.library.imagezoom:library:1.0.4'

    compileOnly 'com.github.bumptech.glide:glide:4.9.0'
    compileOnly 'com.squareup.picasso:picasso:2.5.2'
}

// jcenter configuration for novoda's bintray-release
// $ ./gradlew clean build bintrayUpload -PbintrayUser=BINTRAY_USERNAME -PbintrayKey=BINTRAY_KEY -PdryRun=false
//publish {
//    userOrg = 'zhihu'
//    groupId = 'com.zhihu.android'
//    artifactId = 'matisse'
//    publishVersion = '0.5.3-beta3'
//    desc = 'A well-designed local image selector for Android'
//    website = 'https://www.zhihu.com/'
//}

publishing {
    def githubProperties = new Properties()
    def githubPropertiesFile = "github.properties"
    if (rootProject.file(githubPropertiesFile).exists()) {
        //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file
        githubProperties.load(new FileInputStream(rootProject.file(githubPropertiesFile)))
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             ** Replace GITHUB_USERID with your/organisation Github userID
             ** and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/ltman/matisse")
            credentials {
                /** Create github.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 ** Set env variable GPR_USER & GPR_API_KEY if not adding a properties file**/

                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    publications {
        android.libraryVariants.all { variant ->
            ////def filename = "${archivesBaseName}-${variant.baseName}-${android.defaultConfig.versionName}"
            if (variant.buildType.name == "debug") {
                def filename = "${archivesBaseName}-${variant.baseName}"
                println("Filename: $filename")
                "${variant.name}"(MavenPublication) {
                    //println(variant.name)
                    groupId 'com.ltman'
                    artifactId = "matisse"
                    version = "${android.defaultConfig.versionName}"

                    artifact file("$buildDir/outputs/aar/${filename}.aar")

                    pom.withXml {
                        // for dependencies and exclusions
                        def dependenciesNode = asNode().appendNode('dependencies')
                        def configurationNames = ["implementation", "api", "runtimeOnly"]
                        configurationNames.each { confName ->
                            configurations[confName].allDependencies.each {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                println("dependency: ${it}")
//                                if (it.excludeRules.size() > 0) {
//                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
//                                    it.excludeRules.each { rule ->
//                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
//                                        exclusionNode.appendNode('groupId', rule.group)
//                                        exclusionNode.appendNode('artifactId', rule.module)
//                                    }
//                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
publish.dependsOn(assemble)

task javadoc(type: Javadoc) {
    options.encoding = "utf-8"
}

checkstyle {
    toolVersion = '7.6.1'
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
}

task checkstyle(type:Checkstyle) {
    description 'Runs Checkstyle inspection against matisse sourcesets.'
    group = 'Code Quality'
    configFile rootProject.file('checkstyle.xml')
    ignoreFailures = false
    showViolations true
    classpath = files()
    source 'src/main/java'
}
